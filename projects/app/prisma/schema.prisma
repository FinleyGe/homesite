generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post[]
}

model Post {
  id        String   @id @default(cuid())
  content   String
  language  String?
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
}

model TodoList {
  id        String   @id @default(cuid())
  content   String
  endTime   String?
  done      Boolean  @default(false)
  priority  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      Tag[]    @relation("TagToTodoList")
}

model Tomato {
  id        String   @id @default(cuid())
  focusOn   String?
  createdAt DateTime @default(now())
  score     Int      @default(0)
  tags      Tag[]    @relation("TagToTomato")
}

model Tag {
  id         String       @id @default(cuid())
  name       String
  Collection Collection[] @relation("CollectionToTag")
  Progress   Progress[]   @relation("ProgressToTag")
  TodoList   TodoList[]   @relation("TagToTodoList")
  Tomato     Tomato[]     @relation("TagToTomato")
}

model Collection {
  id        String   @id @default(cuid())
  content   String
  from      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      Tag[]    @relation("CollectionToTag")

  @@map("Collective")
}

model Progress {
  id          String   @id @default(cuid())
  name        String
  description String?
  target      Int
  status      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        Tag[]    @relation("ProgressToTag")
}
